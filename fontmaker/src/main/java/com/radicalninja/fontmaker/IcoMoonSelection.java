package com.radicalninja.fontmaker;

import com.google.gson.annotations.Expose;

import java.util.ArrayList;
import java.util.List;

/**
 * Data model class for parsing font configurations generated by IcoMoonApp[https://icomoon.io/app/].
 */
public class IcoMoonSelection {

    // TODO: Build out support for fonts generated with Fontello[http://fontello.com/] in a similar manner.

    public static final String DEFAULT_FONT_FILENAME = "icomoon.ttf";
    public static final String DEFAULT_CONFIG_FILENAME = "selection.json";

    public static class IconContainer {

        @Expose private IconProperties properties;

        public IconProperties getProperties() {
            return properties;
        }
    }

    public static class IconProperties {

        @Expose private String name;
        @Expose private Integer code;

        public String getName() {
            return name;
        }

        public Integer getCode() {
            return code;
        }
    }

    public static class IcoMoonPreferences {

        @Expose private FontPref fontPref;

        public FontPref getFontPref() {
            return fontPref;
        }
    }

    public static class FontPref {

        @Expose private Integer resetPoint;

        public Integer getResetPoint() {
            return resetPoint;
        }
    }

    public static class Metadata {

        @Expose private String name;

        public String getName() {
            return name;
        }
    }

    @Expose private IconContainer[] icons;
    @Expose private Metadata metadata;
    @Expose private IcoMoonPreferences preferences;

    private IconContainer[] getIcons() {
        return icons;
    }

    public Metadata getMetadata() {
        return metadata;
    }

    private IcoMoonPreferences getPreferences() {
        return preferences;
    }

    public List<FontMaker.GlyphEntry> getGlyphs() {
        List<FontMaker.GlyphEntry> glyphs = new ArrayList<>();
        try {
            for (IconContainer icon : getIcons()) {
                IconProperties props = icon.getProperties();
                glyphs.add(new FontMaker.GlyphEntry(props.getCode(), props.getName()));
            }
        } catch (NullPointerException e) {
            System.out.println("Error processing IcoMoon Glyphs.");
            e.printStackTrace();
        }
        return glyphs;
    }

    public String getFontFilename() {
        try {
            String name = getMetadata().getName();
            if (name == null || name.isEmpty()) {
                return String.format("%s.ttf", name);
            }
        } catch (NullPointerException e) {
            System.out.println("Error processing IcoMoon filename.");
            e.printStackTrace();
        }
        return DEFAULT_FONT_FILENAME;
    }

    public int getResetPoint() {
        try {
            return getPreferences().getFontPref().getResetPoint();
        } catch (NullPointerException e) {
            return 0;
        }
    }

}
